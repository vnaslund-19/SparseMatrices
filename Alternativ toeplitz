    @staticmethod
    def toeplitz(n):
        val = [] # list to store non-zero values
        col_ind = [] # stores the column index of its corresponding non-zero value
        row_start_ind = [] # stores the index of val/col_ind where each row starts & ends
        q=0
        rad=5
        
        for i in range(n):     #for loop for the rows
           valset=False
           
           for j in range(n):   #for loop for the columns
               if i==0 and j==0:   #First row and column
                   val.append(2)
                   col_ind.append(0)
                   row_start_ind.append(0)
                   valset=True
               elif i==0 and j==1:    #First row second column
                   val.append(-1)
                   col_ind.append(1)
                   row_start_ind.append(2)
                   valset=True
               elif i==1 and j==0:  #Second row and first column
                   val.append(-1)
                   col_ind.append(0)
                   valset=True
               elif i==1 and j==1:  #Second row and Second column
                   val.append(2)
                   col_ind.append(1)
                   valset=True
               elif i==1 and j==2:  #Second row and Third column
                   val.append(-1)
                   col_ind.append(2)
                   row_start_ind.append(5)
                   valset=True
                 
               if i==0 or i==1:
                   pass
               elif i==n-1 and j==n-2 and not valset: #Builds the row and columns for last row
                    #q=q+1
                    
                    val.append(-1)
                    col_ind.append(j)
                    val.append(2)
                    col_ind.append(j+1)
                    row_start_ind.append(rad+2)
                    rad=rad+2
               elif not valset and not i==n-1: #Builds the rows and columns
                    q=q+1
                    val.append(-1)
                    col_ind.append(q)
                    val.append(2)
                    col_ind.append(q+1)
                    val.append(-1)
                    col_ind.append(q+2)
                    valset=True
                    row_start_ind.append(rad+3)
                    rad=rad+3
        
        # Create a new SparseMatrix object            #Baserad p√• Niklas kod i __add__  
        result = SparseMatrix.__new__(SparseMatrix)
        result.val = val
        result.ind = col_ind
        result.start_ind = row_start_ind
        result.intern_represent = 'CSR' 
        result.shape = (n,n)            
        result.number_of_nonzero = len(val)
        result.tol = 1e-08
        result.normalize_indices()
        
        return result
